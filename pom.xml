<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!--Spring Boot是基于jar包运行的，打成jar包的程序可以直接通过下面命令运行：java -jar xx.jar -->
	<!--可以通过以下命令修改tomcat端口号：java -jar xx.jar 杠杠server.port=9090-->
	<groupId>com.rocky</groupId>
	<artifactId>springbootdemo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>springbootdemo</name>
	<description>Demo project for Spring Boot</description>

	<!-- 通过<parent>继承 spring-boot-starter-parent POM-->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.2.RELEASE</version>
		<relativePath/><!-- lookup parent from repository-->
	</parent>

	<!--通过dependencyManagement导入 spring-boot-dependencies pom -->
<!--	<dependencyManagement>
		<dependencies>-->
			<!--通过dependencyManagement导入时，该设置不允许您使用如上所述的属性(properties)覆盖各个依赖项，要实现相同的结果，
			您需要在spring-boot-dependencies项之前的项目的dependencyManagement中添加一
			个配置 Override Spring Data release train provided by Spring Boot -->
<!--			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-releasetrain</artifactId>
				<version>Fowler-SR2</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>1.5.1.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>-->

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<project.spring.http.encoding.charset>UTF-8</project.spring.http.encoding.charset>

		<java.version>1.8</java.version>
		<!--在通过继承使用spring boot默认的依赖时，如果你不想使用某个依赖默认的版本，
		您还可以通过覆盖自己的项目中的属性来覆盖各个依赖项-->
		<spring-data-releasetrain.version>Fowler-SR2</spring-data-releasetrain.version>
	</properties>

<!--	把项目打包成一个可执行的超级JAR（uber-JAR）,包括把应用程序的所有依赖打入JAR文件内，
        并为JAR添加一个描述文件，其中的内容能让你用java -jar来运行应用程序。
	    搜索public static void main()方法来标记为可运行类。-->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<!--Spring Boot提供了很多”开箱即用“的依赖模块，都是以spring-boot-starter-xx作为命名的-->
	<!--起步依赖就像这里的品牌机，自动给你封装好了你想要实现的功能的依赖。就比如我们之前要实现web功能，
	引入了spring-boot-starter-web这个起步依赖-->
	<!--所以Spring Boot通过提供众多起步依赖降低项目依赖的复杂度。起步依赖本质上是一个Maven项目对象模型
	（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。很多起步
	依赖的命名都暗示了它们提供的某种或者某类功能。-->
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>


		<!-- freemarker模板引擎视图 -->
<!--		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>-->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!-- 热部署，不用重启 ，这个在这里不需要-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>



		<!-- jstl JSP标准标签库  -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>


		<!-- jsp解析器 -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>

	</dependencies>

</project>
